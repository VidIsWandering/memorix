// notificationService.js
import admin from './firebase.js';
import { knex as db } from '../config/database.js'; // K·∫øt n·ªëi DB

export async function sendNotificationToUser(userId, title, body) {
  try {
    // 1. L·∫•y t·∫•t c·∫£ fcm_token c·ªßa user t·ª´ b·∫£ng user_devices
    const rows = await db('user_devices')
      .select('fcm_token')
      .where('user_id', userId)
      .whereNotNull('fcm_token');

    const tokens = rows.map(row => row.fcm_token);

    if (tokens.length === 0) {
      console.log('Kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o.');
      return;
    }

    // 2. G·ª≠i notification qua FCM (d√πng sendToDevice cho version c≈©)
    const payload = {
      notification: {
        title,
        body,
      },
    };

    const response = await admin.messaging().sendEachForMulticast({
  tokens,
  notification: { title, body }
});
    console.log('K·∫øt qu·∫£ g·ª≠i:', response.successCount, 'th√†nh c√¥ng,', response.failureCount, 'th·∫•t b·∫°i.');

    // 3. X·ª≠ l√Ω c√°c token l·ªói (n·∫øu c√≥)
    if (response.failureCount > 0 && response.results) {
      const failedTokens = [];
      response.results.forEach((resp, idx) => {
        if (resp.error) {
          failedTokens.push(tokens[idx]);
        }
      });
      console.log('Token l·ªói:', failedTokens);
      // üëâ C√≥ th·ªÉ x√≥a c√°c token l·ªói n√†y kh·ªèi DB
    }
  } catch (err) {
    console.error('L·ªói khi g·ª≠i th√¥ng b√°o:', err);
  }
}
